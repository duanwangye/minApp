<?php
/**
 * Created by PhpStorm.
 * User: Duanwangye
 * Date: 18/09/21
 * Company:财联集惠
 */

namespace app\admin\logic;

use app\core\model\Master as Model;
use think\Config;
use think\Db;
use tool\Common;

class Master extends Base
{

    /**
     * @name {post} master/loginByPassword 密码登录
     * @Version 1.0.0
     * @apiName loginByPassword
     * @apiDescription 密码登录
     * @apiGroup Master
     *
     * @apiParam {String} mobile 手机号码
     * @apiParam {String} password 密码
     * @apiParamExample {json} 发送报文:
     *
     * @apiSuccessExample {json} 返回json数据（举例）:
         * @apiUse CreateUserError
     */
    public function loginByPassword() {
        $master = Model::get([
            'mobile'=>$this->app['mobile']
        ]);
        if(!$master) {
            return Common::rm(-3, '该管理员不存在');
        }
        if($master['password'] !=  $master->createPassword($this->app['password'])) {
            return Common::rm(-4, '密码不正确');
        }
        $master['token'] = $master->createToken();
        $master['tokenOverTime'] = $master->createTokenOverTime();
        $master['loginTime'] = THINK_START_TIME;
        $master['ip'] = $this->request->ip();
        $master->save();
        $this->master = $master;

        $group = Db::name('master_group')->where([
            'masterID'=>$master['masterID']
        ])->find();
        if(!$group) {
            return Common::rm(-5, '没有权限');
        }
        return Common::rm(1, '操作成功', [
            'token'=>$master['token'],
            'masterInfo'=>[
                'mobile'=>$this->app['mobile'],
                'roleID'=>$group['masterRoleID']
            ]
        ]);
    }


    /**
     * @name {post} master/logout 退出登录
     * @Version 1.0.0
     * @apiName logout
     * @apiDescription 退出登录
     * @apiGroup Master
     *
     * @apiSuccessExample {json} 返回json数据（举例）:
    {
    "code": 1,
    "msg": "操作成功"
    }
     * @apiUse CreateUserError
     */
    public function logout() {
        Model::update([
            'tokenOverTime'=>0
        ],[
            'token'=>$this->master['token']
        ]);
        return Common::rm(1, '操作成功');
    }

    /*
    * 新增用户 （商户）
    * @name {post}  master/addMerchants
     * @Version 1.0.0
     * @apiName addMerchants
     * @apiDescription 新增商户
     * @apiGroup Master
        */
    public function addMerchants(){
        if ($this->app['roleID'] !=5){
            return $this->addmaster();
        }
         $mobile = Model::get(['mobile' =>  $this->app['mobile']]);
         if ($mobile){
             return Common::rm(-1,'该账号已存在，请勿重复添加');
         }
         $model = Model::create([
             'trueName' => $this->app['trueName'],
             'mobile' => $this->app['mobile'],
             'password' => md5('aisdfa90asopdf0as8d0f8a0s9d8f0asdfjasdfaqw'.$this->app['password']),
             'parentID' =>  $this->app['parentID'],
             'status' =>  1,
            // 'privateKey' => $key['privKey'],
            // 'publicKey' => Config::get('system.pubkey'),  //商户公钥  和系统对接时使用
             'appID' => Common::randString()                  //商户调用接口唯一标识
         ]);
        $group = Group::create([
            'masterID' => $model->masterID,
            'masterRoleID' => $this->app['roleID'],
        ]);

        if ($this->app['parentID'] != 0){
            $pay = MasterPay::where(['masterID' => $this->app['parentID'],'channelID' => $this->app['channelID']])->find();
            #如果商户费率小于代理商费率返回错误
            if ($pay['rate'] > $this->app['rate']){
               return Common::rm(-1,'商户费率不能小于代理商费率');
            }
        }

        //商户支付配置
        $channel = MasterPay::create([
            'masterID' => $model->masterID,
            'channelID' => $this->app['channelID'],
            'payType' =>  !empty($this->app['payType']) ? json_encode($this->app['payType']) : null ,   //支付配置 装换成json字符串
            'paymentList' => implode(',',$this->app['payType']),   //支付配置 装换成json字符串
            'rate' => $this->app['rate'],        //商户渠道费率  （费率要大于父级费率）
            'status' => 1                         //渠道状态  0 关闭 1 开启  新增商户渠道默认开启
         ]);


       if ($channel){
           return Common::rm(1,'操作成功');
       }else{
           return Common::rm(-1,'添加失败');
       }

    }




    public static function checkAuth($master = [], $action = '') {
        $group = Db::name('master_group')->where([
            'masterID'=>$master['masterID']
        ])->find();
        if(!$group) {
            return false;
        }
        if($group['masterRoleID'] == 1) {
            return true;
        }
        $auth = Db::name('master_auth')->where([
            'masterRoleID'=>$group['masterRoleID']
        ])->select();
        if(!$auth) {
            return false;
        }
        $actionS = array_column($auth, 'action');
        if(!in_array($action, $actionS)) {
            return false;
        }
        return true;
    }


}